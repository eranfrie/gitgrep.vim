*gitgrep.txt*                       Plugin for using 'git grep' interactively.


                                Git Grep


Author:            Eran Friedman
Plugin Homepage:   <https://github.com/eranfrie/gitgrep.vim>

===============================================================================
Contents                                                      *GitGrepContents*

  1.  Introduction ................. |GitGrepIntroduction|
  2.  Installation ................. |GitGrepInstallation|
  3.  Selection Menu ............... |GitGrepSelectionMenu|
  4.  Functions .................... |GitGrepFunctions|
  5.  Customizations ............... |GitGrepCustomizations|
  6.  Mappings ..................... |GitGrepMappings|

===============================================================================
1. Introduction                                           *GitGrepIntroduction*

This plugin makes it easy to use 'git grep' from within Vim. It shows a nice
display of the results, allows to jump to one of the results and to jump back
to your previous location. It gives an immediate way to browse new
repositories. It is a language-agnostic and requires no dependencies.

===============================================================================
2. Installation                                           *GitGrepInstallation*

- Install using your favorite package manager, e.g., Vundle:
  1. Add the following to your .vimrc: Plugin 'eranfrie/gitgrep.vim'
  2. Reload .vimrc
  3. Run: :PluginInstall

- Manual installation: copy gitgrep.vim to your plugin directory
  (e.g., ~/.vim/plugin/ in Unix / Mac OS X).

===============================================================================
3. Selection Menu                                        *GitGrepSelectionMenu*

- |j| / |k| / |Down| / |Up| / |PageDown| / |PageUp| to navigate the menu.
- |Enter| to select a result and jump to it.
- |Esc| / |Ctrl-C| to cancel.

===============================================================================
4. Functions                                                 *GitGrepFunctions*

Issue a git grep command and open the selection menu, where flags are git
grep flags (can be empty string) and pattern is the pattern to look for
>
  GitGrep(flags, pattern)
<

Jump back to previous location
>
  GitGrepBack()
<

===============================================================================
5. Customizations                                       *GitGrepCustomizations*

Change the default git grep command
>
  let g:gitgrep_cmd = "grep -r"
<

Jump automatically if there is one match or two matches (and cursor is
already on one of those matches)
>
  let g:gitgrep_auto_jump = 1
<

Exclude files using Vim's regex
>
  let g:gitgrep_exclude_files = "<regex>"
>
E.g., exclude files stsarting witth test or containing simulation
>
  let g:gitgrep_exclude_files = "^test\\|simulation"
<

Set the height (number of lines) of the selection menu
>
  let g:gitgrep_menu_height = 15
<

Set the color of the file path
>
  let g:gitgrep_file_color = "blue"
<

Set the color of the matched pattern
>
  let g:gitgrep_pattern_color = "red"
<

Disable loading the plugin
>
  let g:loaded_gitgrep = 1
<

===============================================================================
6. Mappings                                                   *GitGrepMappings*

Keys are not automatically mapped. You can choose your own mappings, for example:
>
  nnoremap <leader>g :call GitGrep("-w", expand("<cword>"))<CR>
  nnoremap <leader>t :call GitGrepBack()<CR>
  command -bang -nargs=* GG call GitGrep("", expand(<q-args>))
  command -bang -nargs=* GGw call GitGrep("-w", expand(<q-args>))
  command -bang -nargs=* GGi call GitGrep("-i", expand(<q-args>))
<

===============================================================================
vim:ft=help:et:ts=2:sw=2:sts=2:norl
